/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */
apply plugin: 'java'
apply plugin: 'eclipse'

repositories {
	flatDir(dirs: 'lib')
}

dependencies {
	compile 'com.datastax:cassandra-driver-core:3.5.0'
	compile 'guava:guava:19.0'
	compile 'io.github.olivierlemasle.ca:java-ca-lib:0.0.1-SNAPSHOT'
	compile 'jline:jline:2.12.1'
	compile 'joptsimple:jopt-simple:4.8'
	compile 'org.bouncycastle:bcpkix-jdk15on:163'
	compile 'org.bouncycastle:bcprov-jdk15on:163'
	compile 'org.junit:junit-platform-console-standalone:1.7.0-M1'
	compile 'org.sqlite:sqlite-jdbc:3.9.1-SNAPSHOT'
	compile 'org.json:json-simple:1.1.1'
	compile 'org.nfunk.jep:jep:2.4.0'

	compile name: 'apmon'
	compile name: 'catalina'
	compile name: 'FarmMonitor'
	compile name: 'lazyj'
	compile name: 'servlet-api'
	compile name: 'websocket-api'
	compile name: 'tomcat-api'
	compile name: 'tomcat-coyote'
	compile name: 'tomcat-jni'
	compile name: 'tomcat-juli'
	compile name: 'tomcat-util'
	compile name: 'tomcat-util-scan'
	compile name: 'tomcat-websocket'
}

processResources {
	from('.') {
		include 'config/config.properties'
		include 'config/monitoring.properties'
	}

	from 'trusted_authorities.jks'
}

jar {
	archiveName 'alien.jar'
}


task users(type: Jar, dependsOn: jar) {
	archiveName 'alien-users.jar'
	from sourceSets.main.output

	FileTree externalLibs = fileTree(dir: 'lib', includes: [
		'FarmMonitor.jar',
		'apmon.jar',
		'bcp*.jar',
		'catalina.jar',
		'javax.json-api-*.jar',
		'jline-*.jar',
		'jopt-simple-*.jar',
		'json-simple-*.jar',
		'lazyj.jar',
		'servlet-api.jar',
		'tomcat-*.jar',
		'ca-api*.jar',
		'java-ca-lib*.jar',
		'annotations-api.jar'
		])

	externalLibs.each { from zipTree(it) }

}

task cs(type: Jar, dependsOn: jar) {
	archiveName 'alien-cs.jar'
	from sourceSets.main.output

	FileTree externalLibs = fileTree(dir: 'lib', include: '*.jar')
	externalLibs.each { from zipTree(it) }
}

task all {
	dependsOn jar, users, cs
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}
